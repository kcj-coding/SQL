-- The correct SQL operation order is SELECT FROM (and JOIN), WHERE, GROUP BY, HAVING and ORDER BY
-- The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions. To use HAVING it must be preceeded by a GROUP BY clause

SELECT c.first_name, c.age, o.order_id, -- SELECT * for all, SELECT DISTINCT for unique

-- get total age by condition as subquery
(SELECT SUM(age) FROM Customers WHERE country = (SELECT country FROM Customers WHERE country = 'UK')) AS tot_age,

-- get decimal percentage as subquery
CAST(age/(SELECT SUM(age) FROM Customers WHERE country = (SELECT country FROM Customers WHERE country = 'UK')) AS DECIMAL(10,2)) as pct,

-- cumulative age by row
SUM(age) OVER(ORDER BY c.customer_id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS c_age

-- AGGREGATE SQL functions are those that perform calculations e.g. MIN, MAX, SUM, AVG, COUNT across multiple values to return a single value

FROM Customers c

JOIN Orders o ON o.customer_id = c.customer_id

JOIN Shippings s ON s.customer = c.customer_id

WHERE country = (SELECT country from Customers WHERE country = 'UK')

AND c.first_name LIKE '%J%'

AND
-- filter by tot_age as subquery
(SELECT SUM(age) FROM Customers WHERE country = (SELECT country FROM Customers WHERE country = 'UK')) < 50

AND LOWER(s.status) = 'pending'

GROUP BY o.order_id

HAVING COUNT(c.first_name) >= 1 AND SUM(o.amount) > 200 -- AGGREGATE function needing HAVING as no result is stored in the data table (which could use WHERE if stored in data)

ORDER BY o.order_id ASC --DESC